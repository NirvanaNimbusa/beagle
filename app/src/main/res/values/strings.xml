<resources>

    <!-- Main -->
    <string name="open_debug_menu">Open debug menu</string>
    <string name="back">Back</string>
    <string name="coming_soon">Coming soon…</string>
    <string name="app_not_found">No application can handle this link</string>

    <!-- Setup -->
    <string name="setup_title">Setup</string>
    <string name="setup_header_1">Welcome</string>
    <string name="setup_text_1">Beagle is a free and open-source library that adds a smart and easily customizable debug menu to the internal builds of your Android apps.</string>
    <string name="setup_github_button">Check it out on GitHub</string>
    <string name="setup_hint">In this demo application you can trigger the debug menu at any time by shaking the device (one decided shake is enough, think of your phone as a judge\'s gavel) or by tapping on the Beagle logo in the bottom-right corner.\n\nThe following sections provide some guidance with setting up the library while the rest of the application serves as a demo / showcase for the built-in feature set.</string>
    <string name="setup_header_2">Initialization</string>
    <string name="setup_text_2">The first step towards having Beagle in your project is making sure that the JitPack Maven repository is added to the <b>allprojects</b> block of your project-level <b>build.gradle</b> file.</string>
    <string name="setup_text_3">The library offers five variants that display the debug menu in different ways. The next step is selecting the one that fits your application\'s needs the most…</string>
    <string name="setup_variant_activity">Activity</string>
    <string name="setup_variant_bottom_sheet">Bottom sheet</string>
    <string name="setup_variant_dialog">Dialog</string>
    <string name="setup_variant_drawer">Drawer</string>
    <string name="setup_variant_view">View</string>
    <string name="setup_text_4">…and adding the following dependencies to the module-level <b>build.gradle</b> file:</string>
    <string name="setup_text_5">Specifying the <b>noop</b> variant for release builds ensures that none of Beagle\'s functionality makes its way to production, but you can still use the same public API without getting compilation errors.\n\nAfter adding the dependencies, the library can be initialized with a single line of code in the <b>onCreate()</b> method of your custom <b>Application</b> class:</string>
    <string name="setup_header_3">Module configuration</string>
    <string name="setup_text_6">At this point if you run your app, you should see an empty debug menu when you trigger it. To make it more useful, we should configure a list of modules.</string>
    <string name="setup_text_7">Beagle provides multiple ways to set or change the list of modules, the simplest of which is calling:</string>
    <string name="setup_text_8">This function can be called at any time, from any thread, to replace the current configuration with a new list of modules (provided as variable arguments).\n\nIn case you only want to change some parts of the debug menu without affecting the others, there are functions that give you more granular control over the modules.\n\nFor adding a one or more modules you can use this:</string>
    <string name="setup_text_9">In this function, the optional <b>placement</b> parameter can be used to specify the position of the new modules (first, last, or above / below a module that\'s already part of the menu). Specifying the optional <b>lifecycleOwner</b> will automatically remove the modules when that lifecycle is over which is ideal for elements that are specific to a single screen.\n\nThe following function exists for manually removing one or more modules from the debug menu:</string>
    <string name="setup_text_10">Last but not least, the following function is exposed to get the reference of an already added module instance:</string>
    <string name="setup_text_11">None of these functions should throw runtime exceptions in case of invalid arguments.\n\nCheck out the rest of this demo application to see what you can achieve with the built-in modules! The <b>Inspiration</b> page contains a list of case studies showcasing situations where Beagle can be useful (with code snippets to show how each specific debug menu is created) while the <b>Playground</b> page provides an interactive tool for previewing any possible combination of modules.</string>
    <string name="setup_header_4">Troubleshooting</string>
    <string name="setup_text_12">In case of the drawer UI, if you have overwritten the Activity\'s <b>onBackPressed()</b> method, you might notice that the default back navigation handling does not always work as expected. To fix this, in every Activity\'s <b>onBackPressed()</b> you should check that <b>Beagle.hide()</b> returns false before doing any other checks or calling the super implementation:</string>
    <string name="setup_text_13">If you can\'t seem to trigger Beagle in your app, make sure you\'re not adding any Fragments to the container with the ID <b>android.R.id.content</b> (if that\'s the case, introducing another FrameLayout into the View hierarchy for debug builds is a simple fix to the problem).\n\nIf you find any undocumented problems, feel free to reach out and open an issue on GitHub - I\'ll be quick to respond.</string>
    <string name="setup_debug_menu_text_1"><b>This is the debug menu configured by you</b>\n\nIt should contain useful information, like the version number of your app, the build date, or information about the device it\'s running on.\n\nYou can use it to track network requests, show analytics events, display custom logs, session-related data or anything that you consider useful for debugging potential issues or simplifying the testing process.\n\nIt can also contain various interactive features, such as switches, radio groups, buttons, sliders, etc. that you can use to set up a \"God mode\" during development.</string>
    <string name="setup_debug_menu_label">For example:</string>
    <string name="setup_debug_menu_switch">Here is a switch. It does nothing.</string>
    <string name="setup_debug_menu_button">This button also does nothing</string>
    <string name="setup_debug_menu_check_box">Neither does this check box</string>
    <string name="setup_debug_menu_radio_group">This radio group does…</string>
    <string name="setup_debug_menu_radio_group_option_1">Nothing</string>
    <string name="setup_debug_menu_radio_group_option_2">Nada</string>
    <string name="setup_debug_menu_radio_group_option_3">Zilch</string>
    <string name="setup_debug_menu_text_2">The contents of the debug menu can be changed at any time, from any thread. For example, in the case of this application, you will see very different Beagle setups as you explore the various screens and case studies.</string>
    <string name="setup_debug_menu_tutorial_switch">Show detailed tutorial</string>

    <!-- Inspiration -->
    <string name="inspiration_title">Inspiration</string>
    <string name="inspiration_text_1">The module configuration very much depends on your application\'s specific needs, but the following example demonstrates some features that most developers will find useful:</string>
    <string name="inspiration_text_2">The true power of the library lies in modules that require a tiny bit of customization. Check out how Beagle can be useful in the following situations:</string>
    <string name="inspiration_beagle_text">Select one of the case studies to see the specialized version of the debug menu for the situation.</string>
    <string name="inspiration_beagle_switch">Use shared element transitions</string>

    <!-- Case studies / Basic setup -->
    <string name="case_study_basic_setup_title">Basic setup</string>
    <string name="case_study_basic_setup_description">Built-in modules that can be added with almost no configuration and are useful for most projects.</string>
    <string name="case_study_basic_setup_text_1">Open the debug menu to check out its features (except for the "Force crash" button, it works, no need to test it). The current module configuration is initialized using the following code snippet:</string>
    <string name="case_study_basic_setup_text_2">Let\'s see what each individual module does.</string>
    <string name="case_study_basic_setup_text_3"><b>Header</b>\n\nAll this module does is apply a specific formatting to three pieces of text. The variables for this configuration are defined the following way:</string>
    <string name="case_study_basic_setup_text_4">The last line uses a custom build config field:</string>
    <string name="case_study_basic_setup_text_5"><b>AppInfoButton</b>\n\nA simple shortcut to the system settings page of your app. Can be useful if you need quick access to clearing the storage, for example.</string>
    <string name="case_study_basic_setup_text_6"><b>ForceCrashButton</b>\n\nThis module can be used to easily test the application\'s crash reporting capabilities.</string>
    <string name="case_study_basic_setup_text_7"><b>KeylineOverlaySwitchModule</b>\n\nThis switch can be very useful when trying to create pixel-perfect layouts. The dimensions of the overlay grid are configurable, but the default values follow the Material Design specifications for mobile and tablet.</string>
    <string name="case_study_basic_setup_text_8"><b>AnimationDurationSwitch</b>\n\nA frequent use case for this toggle is debugging animation / transition glitches. Check out how it affects this loading indicator:</string>
    <string name="case_study_basic_setup_text_9"><b>DeviceInfo</b>\n\nDisplays important information about the device such as the Android SDK version or the screen resolution that can be helpful in identifying potential device-specific issues.</string>

    <!-- Case studies / Feature toggles -->
    <string name="case_study_feature_toggles_title">Feature toggles</string>
    <string name="case_study_feature_toggles_description">Test different implementations without creating new builds, and persist these feature flags across app launches with a single extra line of code!</string>
    <string name="case_study_feature_toggles_text_1">Turning some flags on or off or changing some specific part of the configuration at runtime is one of the most important use cases for a debug menu. This example showcases four ways Beagle can help you achieve this.</string>
    <string name="case_study_feature_toggles_current_state"><b>Current state:</b>\n• Toggle 1: <b>%1$s</b>\n• Toggle 2: <b>%2$s</b>\n• Toggle 3: <b>%3$s</b>\n• Toggle 4: <b>%4$s</b>\n• Selected check box options: <b>%5$s</b>\n• Selected radio button option: <b>%6$s</b></string>
    <string name="case_study_feature_toggles_state_selected_radio_button_option"> <b>TODO</b></string>
    <string name="case_study_feature_toggles_switch_description"><b>Switch</b>\n\nDescription coming soon…</string>
    <string name="case_study_feature_toggles_check_box_description"><b>CheckBox</b>\n\nDescription coming soon…</string>
    <string name="case_study_feature_toggles_multiple_selection_list_description"><b>MultipleSelectionList</b>\n\nDescription coming soon…</string>
    <string name="case_study_feature_toggles_single_selection_list_description"><b>SingleSelectionList</b>\n\nDescription coming soon…</string>
    <string name="case_study_feature_toggles_persisting_state"><b>Persisting state</b>\n\nDescription coming soon…</string>
    <string name="case_study_feature_toggles_hint_1">For simple on-off flags two UI representations are available:</string>
    <string name="case_study_feature_toggles_switches">Switches</string>
    <string name="case_study_feature_toggles_toggle_1">Toggle 1</string>
    <string name="case_study_feature_toggles_toggle_2">Toggle 2</string>
    <string name="case_study_feature_toggles_check_boxes">Check boxes</string>
    <string name="case_study_feature_toggles_toggle_3">Toggle 3</string>
    <string name="case_study_feature_toggles_toggle_4">Toggle 4</string>
    <string name="case_study_feature_toggles_hint_2">Check boxes can also be grouped together, in this case a single callback is invoked every time one of the values changes:</string>
    <string name="case_study_feature_toggles_check_box_group"><b>Check box group</b></string>
    <string name="case_study_feature_toggles_check_box_1">Option 1</string>
    <string name="case_study_feature_toggles_check_box_2">Option 2</string>
    <string name="case_study_feature_toggles_check_box_3">Option 3</string>
    <string name="case_study_feature_toggles_hint_3">In case only a single selection is considered valid at any time, radio buttons should be used:</string>
    <string name="case_study_feature_toggles_radio_button_group"><b>Radio button group</b></string>
    <string name="case_study_feature_toggles_radio_button_1">Option 1</string>
    <string name="case_study_feature_toggles_radio_button_2">Option 2</string>
    <string name="case_study_feature_toggles_radio_button_3">Option 3</string>

    <!-- Case studies / Authentication -->
    <string name="case_study_authentication_title">Authentication</string>
    <string name="case_study_authentication_description">Simplify the QA process by presenting a list of test accounts and automatically filling in the necessary login information.</string>
    <string name="case_study_authentication_text_1">Manually typing in the same credentials multiple times a day can be a huge waste of time.</string>
    <string name="case_study_authentication_email">Email address</string>
    <string name="case_study_authentication_password">Password</string>
    <string name="case_study_authentication_sign_in_button">Sign in</string>
    <string name="case_study_authentication_signing_in">Signing in!</string>
    <string name="case_study_authentication_text_2">To define a module that helps in this situation, first we need to create a representation of a test account:</string>
    <string name="case_study_authentication_text_3">Extending <b>BeagleListItemContract</b> is a must as it provides information to the library about a unique identifier for the model (in this case the email address is good enough) and the actual text that is displayed on the UI.\n\nThe next step is creating the module:</string>
    <string name="case_study_authentication_text_4">To simplify the flow further, in the callback lambda we\'re hiding the debug menu and automatically starting the sign in flow.\n\nAnother idea to save time is to automatically display the debug menu when the screen is opened, simply by calling:</string>
    <string name="case_study_authentication_text_5">You can test this implementation by toggling the \"Show automatically\" switch and re-opening this screen.</string>
    <string name="case_study_authentication_show_automatically_switch">Show automatically</string>
    <string name="case_study_authentication_test_accounts">Test accounts</string>

    <!-- Case studies / Static data -->
    <string name="case_study_static_data_title">Static data</string>
    <string name="case_study_static_data_description">Ideas for potentially useful information to display.</string>

    <!-- Case studies / Analytics -->
    <string name="case_study_analytics_title">Logging analytics events</string>
    <string name="case_study_analytics_description">Making sure that every required event is tracked from an admin panel can be cumbersome. Why not display the events right in the app, in real time?</string>

    <!-- Case studies / Network request interceptor -->
    <string name="case_study_network_request_interceptor_title">Intercepting network requests</string>
    <string name="case_study_network_request_interceptor_description">See the incoming and outgoing REST API calls and their formatted JSON payload to quickly debug potential issues.</string>

    <!-- Case studies / Environment switcher -->
    <string name="case_study_environment_switcher_title">Environment switcher</string>
    <string name="case_study_environment_switcher_description">Change the application\'s base URL at runtime.</string>

    <!-- Case studies / Mock data generator -->
    <string name="case_study_mock_data_generator_title">Mock data generator</string>
    <string name="case_study_mock_data_generator_description">Filling your development database with random content like \"d23fMIMnow81\" makes your app look bad. Why not add a simple Lorem Ipsum generator instead?</string>

    <!-- Case studies / Bug reporting tool -->
    <string name="case_study_bug_reporting_tool_title">Bug reporting tool</string>
    <string name="case_study_bug_reporting_tool_description">Fetch Beagle, take a screenshot, draw on it, provide additional details and send them together with configurable build and device information to an email address or create a Jira ticket directly.</string>

    <!-- Playground -->
    <string name="playground_title">Playground</string>
    <string name="playground_description">Use this interactive tool to quickly preview any module configuration and generate the code that can be used to create it. The debug menu will be updated automatically, in real time.\n\n• Drag the items vertically to rearrange them\n•     Swipe the items horizontally to remove them\n• Press the last button to add new items\n</string>
    <string name="playground_add_module">Add a new module</string>
    <string name="playground_generate_code">A similar configuration could be created with something like this:</string>

    <!-- Add module -->
    <string name="add_module_title">Add new module</string>
    <string name="add_module_generic_modules"><b>Generic modules</b>\nAny number of instances can be added</string>
    <string name="add_module_button">Button</string>
    <string name="add_module_button_description">Displays a simple button.</string>
    <string name="add_module_check_box">CheckBox</string>
    <string name="add_module_check_box_description">Displays a simple check box.</string>
    <string name="add_module_divider">Divider</string>
    <string name="add_module_divider_description">Displays a simple horizontal line.</string>
    <string name="add_module_item_list">ItemList</string>
    <string name="add_module_item_list_description">Displays a list of simple items represented by [BeagleListItemContract].</string>
    <string name="add_module_key_value_list">KeyValueList</string>
    <string name="add_module_key_value_list_description">Displays a list of key-value pairs that can be collapsed into a header.</string>
    <string name="add_module_label">Label</string>
    <string name="add_module_label_description">Displays a section header label.</string>
    <string name="add_module_log_list">LogList</string>
    <string name="add_module_log_list_description">Displays an expandable list of log messages. An example use case could be logging analytics events</string>
    <string name="add_module_long_text">LongText</string>
    <string name="add_module_long_text_description">Displays a longer piece of text that can be collapsed into a title.</string>
    <string name="add_module_multiple_selection_list">MultipleSelectionList</string>
    <string name="add_module_multiple_selection_list_description">Displays a list of check boxes represented by [BeagleListItemContract] instances. Any number of items can be selected at any given time.</string>
    <string name="add_module_padding">Padding</string>
    <string name="add_module_padding_description">Adds empty space between two other modules</string>
    <string name="add_module_single_selection_list">SingleSelectionList</string>
    <string name="add_module_single_selection_list_description">Displays a list of radio buttons represented by [BeagleListItemContract] instances. Only one item is selected at any given time.</string>
    <string name="add_module_switch">Switch</string>
    <string name="add_module_switch_description">Displays a simple switch.</string>
    <string name="add_module_text">Text</string>
    <string name="add_module_text_description">Displays a piece of text. Can be used for click handling as well.</string>
    <string name="add_module_unique_modules"><b>Unique modules</b>\nOnly a single instance can be added</string>
    <string name="add_module_animation_duration_switch">AnimationDurationSwitch</string>
    <string name="add_module_animation_duration_switch_description">Displays a switch that, when enabled, increases the duration of animations.</string>
    <string name="add_module_app_info">AppInfo</string>
    <string name="add_module_app_info_description">Displays a button that links to the Android App Info page for your app.</string>
    <string name="add_module_device_info">DeviceInfo</string>
    <string name="add_module_device_info_description">Displays information about the current device and the OS.</string>
    <string name="add_module_force_crash_button">ForceCrashButton</string>
    <string name="add_module_force_crash_button_description">Displays a button that throws an exception when pressed - useful for testing crash reporting.</string>
    <string name="add_module_header">Header</string>
    <string name="add_module_header_description">Displays a configurable title, subtitle and text.</string>
    <string name="add_module_keyline_overlay_switch">KeylineOverlaySwitch</string>
    <string name="add_module_keyline_overlay_switch_description">Displays a switch that, when enabled, draws a grid over your app with configurable dimensions that you can use to check the alignments of your Views.</string>

    <!-- About -->
    <string name="about_title">About</string>
    <string name="about_description">Beagle is developed by me, Pandula Péter. Thanks for taking the time to check it out - I hope you\'ll find it useful in your projects. If you have any issues, questions or ideas, don\'t hesitate to contact me!\n</string>
    <string name="about_github"><b>GitHub repository</b>\nCheck out the source code</string>
    <string name="about_google_play"><b>Play Store listing</b>\nRate the app on Google Play</string>
    <string name="about_share"><b>Share</b>\nSpread the word about Beagle</string>
    <string name="about_share_text">Check out Beagle, a free and open-source Android library that adds a highly customizable debug menu to the internal builds of your apps: %s</string>
    <string name="about_contact"><b>Contact me</b>\nDrop me a line about any questions or problems</string>
    <string name="about_open_source"><b>Open source licences</b>\nLegal information regarding dependencies</string>
    <string name="about_donate"><b>Buy me a beer</b>\nIf you found my work useful, consider donating</string>

    <!-- Licences -->
    <string name="licences_title">Licences</string>

</resources>